/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _simpleParser = __webpack_require__(2);

var _simpleParser2 = _interopRequireDefault(_simpleParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 匹配变量
var varReg = /([a-zA-Z_\$]+[\w\$\[\]]*)(\.([a-zA-Z_\$]+[\w\$\[\]]*))*/g;
var expressionReg = /\{\{(.*?)\}\}/g;
// 匹配字符串
var strReg = /"([^"]*)"|'([^']*)'/g;

var plainStrObj = {};

// 转换属性数据为keyValue对象
var Attrs2KeyValue = function Attrs2KeyValue(attrArr) {
  var attrObj = {};
  for (var i = 0; i < attrArr.length; i++) {
    attrObj[attrArr[i].name] = attrArr[i].value;
  }
  return attrObj;
};

exports.default = {
  walk: function walk(node) {
    return this.compileNode(node);
  },
  getAndRemoveAttr: function getAndRemoveAttr(node, attrName, filterList) {
    var attrVal = void 0;
    if (node.attr[attrName] == null) {
      attrVal = null;
    } else if (attrName === 'wx:for-item' || attrName === 'wx:for-index') {
      attrVal = node.attr[attrName];
    } else {
      attrVal = this.transformExpression(node, attrName, filterList);
    }
    delete node.attr[attrName];
    return attrVal;
  },
  getRandom: function getRandom(type) {
    return '$$' + type + parseInt(Math.random() * 1e8);
  },

  // 是否不做替换的变量
  isFilterVar: function isFilterVar(name, filterList) {
    for (var i = 0; i < filterList.length; i++) {
      if (new RegExp('^' + filterList[i] + '(\\.(.*))*$').test(name)) {
        return true;
      }
    }
    return false;
  },
  getKeyNameByStrValue: function getKeyNameByStrValue(strVal) {
    for (var i in plainStrObj) {
      if (plainStrObj[i] === strVal) {
        return i;
      }
    }
  },

  // 解析单个双引号表达式内容
  parseExpression: function parseExpression(expression, filterList) {
    var _this = this;

    // 替换表达式内的字符串
    expression = expression.replace(strReg, function (val, $1, $2) {
      var strVal = $1 || $2;
      // 避免相同字符串重复赋值
      var randomName = _this.getKeyNameByStrValue(strVal);

      if (randomName) {
        return randomName;
      }

      randomName = _this.getRandom('str');
      plainStrObj[randomName] = strVal;
      return randomName;
    });

    return expression.replace(varReg, function (val) {
      // 不需替代属性
      if (_this.isFilterVar(val, filterList)) {
        return val;
      }
      return 'data\.' + val;
    });
  },
  transformExpression: function transformExpression(node, name, filterList) {
    filterList = filterList || [];
    var expression = node.attr[name];
    var result = void 0;

    // 存在双括号表达式
    if (expressionReg.test(expression)) {
      var tokens = [];
      var index = void 0;
      var lastIndex = expressionReg.lastIndex = 0;
      // 找出所有双括号表达式
      while (result = expressionReg.exec(expression)) {
        index = result.index;
        if (index > lastIndex) {
          tokens.push(JSON.stringify(expression.slice(lastIndex, index)));
        }
        tokens.push('(' + this.parseExpression(result[1].trim(), filterList) + ')');
        lastIndex = index + result[0].length;
      }

      if (lastIndex < expression.length) {
        tokens.push('(' + JSON.stringify(expression.slice(lastIndex)) + ')');
      }

      return tokens.join('+');
    }
    // 加双引号
    return JSON.stringify(expression);
  },
  removeChild: function removeChild(child) {
    var parent = child.parentNode;
    for (var i = 0; i < parent.children.length; i++) {
      if (parent.children[i] === child) {
        parent.children.splice(i, 1);
        return;
      }
    }
  },
  compileNode: function compileNode(node, filterList) {
    if (!node) {
      return 'null';
    }
    // 标识已编译过，避免被重复编译
    // node.hasCompile = true;
    var hasIfVal = this.hasAttr(node, 'wx:if');
    var hasElifVal = this.hasAttr(node, 'wx:elif');
    var hasElseVal = this.hasAttr(node, 'wx:else');
    var hasForVal = this.hasAttr(node, 'wx:for');
    // 处理for
    if (hasForVal) {
      var forVal = this.getAndRemoveAttr(node, 'wx:for', filterList);
      if (forVal) {
        var forItemVal = this.getAndRemoveAttr(node, 'wx:for-item', filterList) || 'item';
        var forIndexVal = this.getAndRemoveAttr(node, 'wx:for-index', filterList) || 'index';
        return '...(' + forVal + ' || []).map((' + forItemVal + ',' + forIndexVal + ') => {' + 'return ' + this.compileNode(node, [forItemVal, forIndexVal]) + '})';
      }
    }
    // 处理if
    else if (hasIfVal) {
        var ifVal = this.getAndRemoveAttr(node, 'wx:if', filterList);
        var nextHasElif = this.hasAttr(node.nextSibling, 'wx:elif', filterList);
        var nextHasElse = this.hasAttr(node.nextSibling, 'wx:else', filterList);
        if (nextHasElif || nextHasElse) {
          return '((' + ifVal + ') ? ' + this.compileNode(node, filterList) + ':' + this.compileNode(node.nextSibling, filterList) + ')';
        } else {
          return '((' + ifVal + ') ? ' + this.compileNode(node, filterList) + ': null)';
        }
      }
      // 处理elif
      else if (hasElifVal) {
          var elifVal = this.getAndRemoveAttr(node, 'wx:elif', filterList);
          var _nextHasElif = this.hasAttr(node.nextSibling, 'wx:elif', filterList);
          var _nextHasElse = this.hasAttr(node.nextSibling, 'wx:else', filterList);
          this.removeChild(node);
          if (_nextHasElif || _nextHasElse) {
            return '((' + elifVal + ') ? ' + this.compileNode(node, filterList) + ':' + this.compileNode(node.nextSibling, filterList) + ')';
          } else {
            return '((' + elifVal + ') ? ' + this.compileNode(node, filterList) + ': null)';
          }
        }
        // 处理else
        else if (hasElseVal) {
            var elseVal = this.getAndRemoveAttr(node, 'wx:else', filterList);
            this.removeChild(node);
            return this.compileNode(node, filterList);
          }
          // 处理普通元素
          else {
              return 'new ' + this.upperFirstLetter(node.tagName) + '({style: {}, attr: ' + this.getAttrObject(node, filterList) + ',children:' + this.compileChildren(node, filterList) + '})';
            }
  },
  getAttrObject: function getAttrObject(node, filterList) {
    var arr = [];
    for (var name in node.attr) {
      if (node.attr[name] != null) {
        arr.push('"' + name + '":' + this.transformExpression(node, name, filterList));
      }
    }
    return '{' + arr.join(',') + '}';
  },
  hasAttr: function hasAttr(node, name) {
    if (!node) {
      return false;
    }
    return name in node.attr;
  },
  compileChildren: function compileChildren(node, filterList) {
    var child = void 0;
    var arr = [];
    while (node.children.length) {
      child = node.children.shift();
      arr.push(this.compileNode(child, filterList));
    }
    return '$filterNullChildren([' + arr.join(',') + '])';
  },
  upperFirstLetter: function upperFirstLetter(name) {
    return name[0].toUpperCase() + name.slice(1);
  },
  generateCode: function generateCode(node) {
    var sectionCode = this.walk(node);
    return this.getPlainTextCode() + ' return ' + sectionCode; // 遍历生成代码
  },
  getPlainTextCode: function getPlainTextCode() {
    var codeStr = JSON.stringify(plainStrObj);
    plainStrObj = {};
    return 'Object.assign(data,' + codeStr + ');';
  },
  compileTpl: function compileTpl(tpl) {
    var parser = new _simpleParser2.default();
    var nodeStack = [];
    var root = {
      tagName: 'view',
      attr: {},
      children: []
    };
    parser.parse(tpl, {
      startElement: function startElement(tagName, attr) {
        var lastStackNode = nodeStack[nodeStack.length - 1];
        var parentNode = void 0;
        var node = void 0;
        var expression = void 0;
        var result = void 0;
        var children = void 0;

        if (lastStackNode) {
          parentNode = lastStackNode;
        } else {
          parentNode = root;
        }

        children = parentNode.children;

        node = {
          tagName: tagName,
          style: {},
          attr: Attrs2KeyValue(attr),
          children: [],
          parentNode: parentNode
        };
        // 互相设置相邻兄弟节点
        if (children.length) {
          node.previousSbling = children[children.length - 1];
          children[children.length - 1].nextSibling = node;
        }
        children.push(node);
        nodeStack.push(node);
      },
      characters: function characters(text) {
        if (!text.trim()) {
          return;
        }
        var lastStackNode = nodeStack[nodeStack.length - 1];
        if (lastStackNode) {
          lastStackNode.attr.content = text;
        }
      },
      endElement: function endElement(tagName) {
        nodeStack.pop();
      }
    });
    return this.generateCode(root);
  }
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

function SimpleHtmlParser() {}

SimpleHtmlParser.prototype = {

	handler: null,

	// regexps

	startTagRe: /^<([^>\s\/]+)((\s+[^=>\s]+(\s*=\s*((\"[^"]*\")|(\'[^']*\')|[^>\s]+))?)*)\s*\/?\s*>/m,
	endTagRe: /^<\/([^>\s]+)[^>]*>/m,
	attrRe: /([^=\s]+)(\s*=\s*((\"([^"]*)\")|(\'([^']*)\')|[^>\s]+))?/gm,

	parse: function parse(s, oHandler) {
		if (oHandler) this.contentHandler = oHandler;

		var i = 0;
		var res, lc, lm, rc, index;
		var treatAsChars = false;
		var oThis = this;
		while (s.length > 0) {
			// Comment
			if (s.substring(0, 4) == "<!--") {
				index = s.indexOf("-->");
				if (index != -1) {
					this.contentHandler.comment(s.substring(4, index));
					s = s.substring(index + 3);
					treatAsChars = false;
				} else {
					treatAsChars = true;
				}
			}

			// end tag
			else if (s.substring(0, 2) == "</") {
					if (this.endTagRe.test(s)) {
						lc = RegExp.leftContext;
						lm = RegExp.lastMatch;
						rc = RegExp.rightContext;

						lm.replace(this.endTagRe, function () {
							return oThis.parseEndTag.apply(oThis, arguments);
						});

						s = rc;
						treatAsChars = false;
					} else {
						treatAsChars = true;
					}
				}
				// start tag
				else if (s.charAt(0) == "<") {
						if (this.startTagRe.test(s)) {
							lc = RegExp.leftContext;
							lm = RegExp.lastMatch;
							rc = RegExp.rightContext;

							lm.replace(this.startTagRe, function () {
								return oThis.parseStartTag.apply(oThis, arguments);
							});

							s = rc;
							treatAsChars = false;
						} else {
							treatAsChars = true;
						}
					}

			if (treatAsChars) {
				index = s.indexOf("<");
				if (index == -1) {
					this.contentHandler.characters(s);
					s = "";
				} else {
					this.contentHandler.characters(s.substring(0, index));
					s = s.substring(index);
				}
			}

			treatAsChars = true;
		}
	},

	parseStartTag: function parseStartTag(sTag, sTagName, sRest) {
		var attrs = this.parseAttributes(sTagName, sRest);
		this.contentHandler.startElement(sTagName, attrs);
	},

	parseEndTag: function parseEndTag(sTag, sTagName) {
		this.contentHandler.endElement(sTagName);
	},

	parseAttributes: function parseAttributes(sTagName, s) {
		var oThis = this;
		var attrs = [];
		s.replace(this.attrRe, function (a0, a1, a2, a3, a4, a5, a6) {
			attrs.push(oThis.parseAttribute(sTagName, a0, a1, a2, a3, a4, a5, a6));
		});
		return attrs;
	},

	parseAttribute: function parseAttribute(sTagName, sAttribute, sName) {
		var value = "";
		if (arguments[7]) value = arguments[8];else if (arguments[5]) value = arguments[6];else if (arguments[3]) value = arguments[4];

		var empty = !value && !arguments[3];
		return { name: sName, value: empty ? null : value };
	}
};

exports.default = SimpleHtmlParser;

/***/ }),
/* 3 */,
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _compiler = __webpack_require__(1);

var _compiler2 = _interopRequireDefault(_compiler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _compiler2.default;

/***/ })
/******/ ]);